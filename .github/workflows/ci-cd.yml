name: Test and Publish Python Package

on:
  push:
    branches: '*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: '*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Build package
      id: build
      run: |

        python setup.py bdist_wheel
        pip install dist/*
        BUILD_FILE=$(basename $(ls dist/*.whl))
        echo "BUILD_FILE=$BUILD_FILE" >> $GITHUB_OUTPUT
        
    - name: Run tests
      run: |
        python setup.py pytest
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.build.outputs.BUILD_FILE }}
        path: dist/${{ steps.build.outputs.BUILD_FILE }}

    - name: Clean up build files
      run: |
        rm -rf build dist *.egg-info
        echo "Cleaned up build files"
        echo "Build file: ${{ steps.build.outputs.BUILD_FILE }}"

  publish:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Build package
      id: build
      run: |
        python setup.py bdist_wheel
        BUILD_FILE=$(basename $(ls dist/*.whl))
        echo "BUILD_FILE=$BUILD_FILE" >> $GITHUB_OUTPUT

    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Extract changelog for the tagged version
      run: |
        TAG_VERSION=${{ steps.get_version.outputs.VERSION }}
        if [[ "$TAG_VERSION" == "0.1.0" ]]; then
          sed -n "/## $TAG_VERSION/,/^$/p" CHANGELOG.md > extracted-changelog.txt
        else
          sed -n "/## $TAG_VERSION/,/##/{/## $TAG_VERSION/b;/##/b;p}" CHANGELOG.md > extracted-changelog.txt
        fi
        cat extracted-changelog.txt
        echo "{body}={cat extracted-changelog.txt}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: extracted-changelog.txt

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ steps.build.outputs.BUILD_FILE }}
        asset_name: ${{ steps.build.outputs.BUILD_FILE }}
        asset_content_type: application/zip
    
    - name: Clean up build files
      run: |
        rm -rf build dist *.egg-info

